# Add treatment effect after adoption for treated units
sim_data_with_controls$ln_age_mort_rate <- sim_data_with_controls$y0 +
ifelse(sim_data_with_controls$treated &
!is.na(sim_data_with_controls$adopt_year) &
sim_data_with_controls$Year > sim_data_with_controls$adopt_year,
0.25, 0)
# Inspect
head(sim_data_with_controls)
estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
control_group_var = "treated",   # 1 = treated, 0 = control
covariate_vars = c("covariate1", "covariate2"),
degrees = 2,
horizons = 1,
beta_estimator = "ols",
se_method = "analytic"
)
devtools::document()
estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
control_group_var = "treated",   # 1 = treated, 0 = control
covariate_vars = c("covariate1", "covariate2"),
degrees = 2,
horizons = 1,
beta_estimator = "ols",
se_method = "analytic"
)
install.packages("dplyr")
devtools::load_all()
library(dplyr)
library(purrr)
estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
control_group_var = "treated",   # 1 = treated, 0 = control
covariate_vars = c("covariate1", "covariate2"),
degrees = 2,
horizons = 1,
beta_estimator = "ols",
se_method = "analytic"
)
devtools::document()
estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
control_group_var = "treated",   # 1 = treated, 0 = control
covariate_vars = c("covariate1", "covariate2"),
degrees = 2,
horizons = 1,
beta_estimator = "ols",
se_method = "analytic"
)
# Parameters
n_units <- 20
# dev/simulate_fat_testdata.R
# ------------------------------------------------------------
# This script generates simulated panel data for testing the
# estimate_fat() function under different specifications:
#   - Baseline (no covariates)
#   - Pooled OLS-adjusted
#   - IV-adjusted
#
# It is meant for development and internal testing purposes.
# ------------------------------------------------------------
set.seed(123)
# Parameters
n_units <- 20
n_years <- 10
min_year <- 2000
unit_names <- paste0("state", 1:n_units)
data_list <- lapply(unit_names, function(unit) {
treat_year <- sample(2004:2007, 1)  # Treatment years between 2004 and 2007
years <- min_year:(min_year + n_years - 1)
tibble::tibble(
state = unit,
Year = years,
adopt_year = treat_year,
timeToTreat = Year - treat_year,
covariate1 = rnorm(n_years, mean = 0, sd = 1),
covariate2 = rnorm(n_years, mean = 0, sd = 1),
instrument = lag(covariate1, 2),
ln_age_mort_rate = 3 + 0.05 * (years - min_year) - 0.2 * (years >= treat_year) +
0.3 * rnorm(n_years) + 0.5 * rnorm(1)  # base trend + noise + unit FE
)
})
# Combine into panel
sim_data <- dplyr::bind_rows(data_list)
# Clean up instrument column (remove NA due to lag)
sim_data <- dplyr::group_by(sim_data, state) %>%
dplyr::mutate(instrument = dplyr::lag(covariate1, 2)) %>%
dplyr::ungroup()
# Save to global environment for immediate testing
assign("sim_data", sim_data, envir = .GlobalEnv)
# Optional: write to file for persistent testing or examples
# readr::write_csv(sim_data, "dev/simulated_fat_data.csv")
# Ready to test:
# estimate_fat(sim_data, unit_var = "state", time_var = "Year", ... )
set.seed(42)
# Parameters
n_units <- 40
n_years <- 10
units <- paste0("state", 1:n_units)
years <- 2000 + 0:(n_years - 1)
# Simulate unit-level data
sim_data_with_controls <- expand.grid(state = units, Year = years)
sim_data_with_controls <- sim_data_with_controls[order(sim_data_with_controls$state,
sim_data_with_controls$Year), ]
# Half treated, half control
treated_units <- sample(units, n_units / 2)
sim_data_with_controls$treated <- sim_data_with_controls$state %in% treated_units
# Assign adoption year only to treated units
sim_data_with_controls$adopt_year <- ifelse(sim_data_with_controls$treated,
sample(2003:2006, length(treated_units), replace = TRUE)[
match(sim_data_with_controls$state[sim_data_with_controls$treated], treated_units)
],
NA)
# Time to treatment
sim_data_with_controls$time_to_treat <- sim_data_with_controls$Year - sim_data_with_controls$adopt_year
# Simulate covariates and outcome
sim_data_with_controls$covariate1 <- rnorm(nrow(sim_data_with_controls))
sim_data_with_controls$covariate2 <- rnorm(nrow(sim_data_with_controls))
# Simulate true untreated outcome
sim_data_with_controls$y0 <- with(sim_data_with_controls,
0.5 * covariate1 - 0.3 * covariate2 + 0.05 * (Year - 2000) +
rnorm(nrow(sim_data_with_controls), sd = 0.2)
)
# Add treatment effect after adoption for treated units
sim_data_with_controls$ln_age_mort_rate <- sim_data_with_controls$y0 +
ifelse(sim_data_with_controls$treated &
!is.na(sim_data_with_controls$adopt_year) &
sim_data_with_controls$Year > sim_data_with_controls$adopt_year,
0.25, 0)
# Inspect
head(sim_data_with_controls)
estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
covariate_vars = c("covariate1", "covariate2"),
degrees = 1:2,
horizons = 1:3,
beta_estimator = "ols",
se_method = "analytic",
control_group_value = FALSE  # indicates that treated == FALSE defines the control group
)
devtools::document()
estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
covariate_vars = c("covariate1", "covariate2"),
degrees = 1:2,
horizons = 1:3,
beta_estimator = "ols",
se_method = "analytic",
control_group_value = FALSE  # indicates that treated == FALSE defines the control group
)
results_dfat <- estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 1:2,
horizons = 1:3,
beta_estimator = "none",
se_method = "analytic",
control_group_value = FALSE  # This activates DFAT mode using 'treated' column
)
devtools::document()
results_dfat <- estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 1:2,
horizons = 1:3,
beta_estimator = "none",
se_method = "analytic",
control_group_value = FALSE  # This activates DFAT mode using 'treated' column
)
results_dfat <- estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 1:2,
horizons = 1:3,
beta_estimator = "none",
se_method = "analytic",
control_group_value = FALSE  # Activates DFAT logic
)
rlang::last_trace()
sim_data_with_controls$treated <- sim_data_with_controls$state %in% unique(sim_data_with_controls$state[!is.na(sim_data_with_controls$adopt_year)])
sim_data_with_controls$treated <- sim_data_with_controls$state %in% unique(sim_data_with_controls$state[!is.na(sim_data_with_controls$adopt_year)])
results_dfat <- estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 1:2,
horizons = 1:3,
beta_estimator = "none",
se_method = "analytic",
control_group_value = FALSE  # Activates DFAT logic
)
sim_data_with_controls$treated <- sim_data_with_controls$state %in% unique(sim_data_with_controls$state[!is.na(sim_data_with_controls$adopt_year)])
table(sim_data_with_controls$treated, useNA = "always")
results_dfat <- estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 1:2,
horizons = 1:3,
beta_estimator = "none",
se_method = "analytic",
control_group_value = FALSE
)
devtools::document()
results_dfat <- estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 1:2,
horizons = 1:3,
beta_estimator = "none",
se_method = "analytic",
control_group_value = FALSE  # Activates DFAT logic
)
rlang::last_trace()
devtools::document()
devtools::document()
results_dfat <- estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 1:2,
horizons = 1:3,
beta_estimator = "none",
se_method = "analytic",
control_group_value = FALSE  # This triggers DFAT mode using the 'treated' column
)
print(results_dfat)
devtools::document()
results_dfat <- estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 1:2,
horizons = 1:3,
beta_estimator = "none",
se_method = "analytic",
control_group_value = FALSE  # This triggers DFAT mode using the 'treated' column
)
results_dfat <- estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 1:2,
horizons = 1:3,
beta_estimator = "none",       # No pooled beta regression
se_method = "clustered",       # Try also "analytic" or "bootstrap"
n_bootstrap = 500,             # Only used if se_method = "bootstrap"
control_group_value = FALSE    # Activates DFAT logic; assumes treated == TRUE or FALSE
)
sim_data_with_controls$adopt_year <- as.numeric(levels(sim_data_with_controls$adopt_year))[sim_data_with_controls$adopt_year]
results_dfat <- estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 1:2,
horizons = 1:3,
beta_estimator = "none",       # No pooled beta regression
se_method = "clustered",       # Try also "analytic" or "bootstrap"
n_bootstrap = 500,             # Only used if se_method = "bootstrap"
control_group_value = FALSE    # Activates DFAT logic; assumes treated == TRUE or FALSE
)
set.seed(42)
# Parameters
n_units <- 40
n_years <- 10
units <- paste0("state", 1:n_units)
years <- 2000 + 0:(n_years - 1)
# Simulate unit-level data
sim_data_with_controls <- expand.grid(state = units, Year = years)
sim_data_with_controls <- sim_data_with_controls[order(sim_data_with_controls$state,
sim_data_with_controls$Year), ]
# Half treated, half control
treated_units <- sample(units, n_units / 2)
sim_data_with_controls$treated <- sim_data_with_controls$state %in% treated_units
# Assign adoption year only to treated units
sim_data_with_controls$adopt_year <- ifelse(sim_data_with_controls$treated,
sample(2003:2006, length(treated_units), replace = TRUE)[
match(sim_data_with_controls$state[sim_data_with_controls$treated], treated_units)
],
NA)
# Time to treatment
sim_data_with_controls$time_to_treat <- sim_data_with_controls$Year - sim_data_with_controls$adopt_year
# Simulate covariates and outcome
sim_data_with_controls$covariate1 <- rnorm(nrow(sim_data_with_controls))
sim_data_with_controls$covariate2 <- rnorm(nrow(sim_data_with_controls))
# Simulate true untreated outcome
sim_data_with_controls$y0 <- with(sim_data_with_controls,
0.5 * covariate1 - 0.3 * covariate2 + 0.05 * (Year - 2000) +
rnorm(nrow(sim_data_with_controls), sd = 0.2)
)
# Add treatment effect after adoption for treated units
sim_data_with_controls$ln_age_mort_rate <- sim_data_with_controls$y0 +
ifelse(sim_data_with_controls$treated &
!is.na(sim_data_with_controls$adopt_year) &
sim_data_with_controls$Year > sim_data_with_controls$adopt_year,
0.25, 0)
# Inspect
head(sim_data_with_controls)
results_dfat <- estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 1:2,
horizons = 1:3,
beta_estimator = "none",       # No pooled beta regression
se_method = "clustered",       # Try also "analytic" or "bootstrap"
n_bootstrap = 500,             # Only used if se_method = "bootstrap"
control_group_value = FALSE    # Activates DFAT logic; assumes treated == TRUE or FALSE
)
sim_data_with_controls$adopt_year <- as.numeric(levels(sim_data_with_controls$adopt_year))[sim_data_with_controls$adopt_year]
set.seed(42)
# Parameters
n_units <- 40
n_years <- 10
units <- paste0("state", 1:n_units)
years <- 2000 + 0:(n_years - 1)
# Simulate unit-level data
sim_data_with_controls <- expand.grid(state = units, Year = years)
sim_data_with_controls <- sim_data_with_controls[order(sim_data_with_controls$state,
sim_data_with_controls$Year), ]
# Half treated, half control
treated_units <- sample(units, n_units / 2)
sim_data_with_controls$treated <- sim_data_with_controls$state %in% treated_units
# Assign adoption year only to treated units
sim_data_with_controls$adopt_year <- ifelse(sim_data_with_controls$treated,
sample(2003:2006, length(treated_units), replace = TRUE)[
match(sim_data_with_controls$state[sim_data_with_controls$treated], treated_units)
],
NA)
# Time to treatment
sim_data_with_controls$time_to_treat <- sim_data_with_controls$Year - sim_data_with_controls$adopt_year
# Simulate covariates and outcome
sim_data_with_controls$covariate1 <- rnorm(nrow(sim_data_with_controls))
sim_data_with_controls$covariate2 <- rnorm(nrow(sim_data_with_controls))
# Simulate true untreated outcome
sim_data_with_controls$y0 <- with(sim_data_with_controls,
0.5 * covariate1 - 0.3 * covariate2 + 0.05 * (Year - 2000) +
rnorm(nrow(sim_data_with_controls), sd = 0.2)
)
# Add treatment effect after adoption for treated units
sim_data_with_controls$ln_age_mort_rate <- sim_data_with_controls$y0 +
ifelse(sim_data_with_controls$treated &
!is.na(sim_data_with_controls$adopt_year) &
sim_data_with_controls$Year > sim_data_with_controls$adopt_year,
0.25, 0)
# Inspect
head(sim_data_with_controls)
class(adopt_year)
class(sim_data_with_controls$adopt_year)
set.seed(42)
# Parameters
n_units <- 40
n_years <- 10
units <- paste0("state", 1:n_units)
years <- 2000 + 0:(n_years - 1)
# Simulate unit-level data
sim_data_with_controls <- expand.grid(state = units, Year = years)
sim_data_with_controls <- sim_data_with_controls[order(sim_data_with_controls$state,
sim_data_with_controls$Year), ]
# Half treated, half control
treated_units <- sample(units, n_units / 2)
sim_data_with_controls$treated <- sim_data_with_controls$state %in% treated_units
# Assign adoption year only to treated units
sim_data_with_controls$adopt_year <- ifelse(sim_data_with_controls$treated,
sample(2003:2006, length(treated_units), replace = TRUE)[
match(sim_data_with_controls$state[sim_data_with_controls$treated], treated_units)
],
NA)
# Time to treatment
sim_data_with_controls$time_to_treat <- sim_data_with_controls$Year - sim_data_with_controls$adopt_year
# Simulate covariates and outcome
sim_data_with_controls$covariate1 <- rnorm(nrow(sim_data_with_controls))
sim_data_with_controls$covariate2 <- rnorm(nrow(sim_data_with_controls))
# Simulate true untreated outcome
sim_data_with_controls$y0 <- with(sim_data_with_controls,
0.5 * covariate1 - 0.3 * covariate2 + 0.05 * (Year - 2000) +
rnorm(nrow(sim_data_with_controls), sd = 0.2)
)
# Add treatment effect after adoption for treated units
sim_data_with_controls$ln_age_mort_rate <- sim_data_with_controls$y0 +
ifelse(sim_data_with_controls$treated &
!is.na(sim_data_with_controls$adopt_year) &
sim_data_with_controls$Year > sim_data_with_controls$adopt_year,
0.25, 0)
# Inspect
head(sim_data_with_controls)
results_dfat <- estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 1:2,
horizons = 1:3,
beta_estimator = "none",       # No pooled beta regression
se_method = "clustered",       # Try also "analytic" or "bootstrap"
n_bootstrap = 500,             # Only used if se_method = "bootstrap"
control_group_value = FALSE    # Activates DFAT logic; assumes treated == TRUE or FALSE
)
rlang::last_trace()
devtools::document()
results_dfat <- estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 1:2,
horizons = 1:3,
beta_estimator = "none",       # No pooled beta regression
se_method = "clustered",       # Try also "analytic" or "bootstrap"
n_bootstrap = 500,             # Only used if se_method = "bootstrap"
control_group_value = FALSE    # Activates DFAT logic; assumes treated == TRUE or FALSE
)
rlang::last_trace()
devtools::document()
results_dfat <- estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 1:2,
horizons = 1:3,
beta_estimator = "none",       # No pooled beta regression
se_method = "clustered",       # Try also "analytic" or "bootstrap"
n_bootstrap = 500,             # Only used if se_method = "bootstrap"
control_group_value = FALSE    # Activates DFAT logic; assumes treated == TRUE or FALSE
)
devtools::document()
results_dfat <- estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 1:2,
horizons = 1:3,
beta_estimator = "none",       # No pooled beta regression
se_method = "clustered",       # Try also "analytic" or "bootstrap"
n_bootstrap = 500,             # Only used if se_method = "bootstrap"
control_group_value = FALSE    # Activates DFAT logic; assumes treated == TRUE or FALSE
)
rlang::last_trace()
devtools::document()
results_dfat <- estimate_fat(
data = sim_data_with_controls,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 1:2,
horizons = 1:3,
beta_estimator = "none",       # No pooled beta regression
se_method = "clustered",       # Try also "analytic" or "bootstrap"
n_bootstrap = 500,             # Only used if se_method = "bootstrap"
control_group_value = FALSE    # Activates DFAT logic; assumes treated == TRUE or FALSE
)
browseVignettes("ffp2")
install.packages("forecast", dependencies = TRUE)
browseVignettes("forecast")
