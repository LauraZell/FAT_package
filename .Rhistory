unit_var           = "state",
time_var           = "Year",
outcome_var        = "ln_age_mort_rate",
treat_time_var     = "adopt_year",
degrees            = 0:3,
horizons           = 1:5,
lags               = 0:3,                 # test treatment shifted 0..3 years earlier
se_method          = "analytic",
beta_estimator     = "none",               # or "iv", "unitwise", "none"
min_iv_lag         = 2,
max_iv_lag         = 2,
control_group_value= FALSE,                # set e.g. FALSE to switch to DFAT mode
forecast_lag       = 0,
pretreatment_window= "full"
)
placebo_dfat_out <- estimate_placebo_fat(
data               = sim_data_with_controls,
unit_var           = "state",
time_var           = "Year",
outcome_var        = "ln_age_mort_rate",
treat_time_var     = "adopt_year",
degrees            = 0:3,
horizons           = 1:5,
lags               = 0:3,                 # test treatment shifted 0..3 years earlier
se_method          = "analytic",
covariate_vars     = c("covariate1", "covariate2"),
beta_estimator     = "none",               # or "iv", "unitwise", "none"
min_iv_lag         = 2,
max_iv_lag         = 2,
control_group_value= FALSE,                # set e.g. FALSE to switch to DFAT mode
forecast_lag       = 0,
pretreatment_window= "full"
)
placebo_dfat_out <- estimate_placebo_fat(
data               = sim_data_with_controls,
unit_var           = "state",
time_var           = "Year",
outcome_var        = "ln_age_mort_rate",
treat_time_var     = "adopt_year",
degrees            = 0:3,
horizons           = 1:5,
lags               = 0:3,                 # test treatment shifted 0..3 years earlier
se_method          = "analytic",
covariate_vars     = c("covariate1", "covariate2"),
beta_estimator     = "ols",               # or "iv", "unitwise", "none"
min_iv_lag         = 2,
max_iv_lag         = 2,
control_group_value= FALSE,                # set e.g. FALSE to switch to DFAT mode
forecast_lag       = 0,
pretreatment_window= "full"
)
placebo_dfat_out <- estimate_placebo_fat(
data               = sim_data_with_controls,
unit_var           = "state",
time_var           = "Year",
outcome_var        = "ln_age_mort_rate",
treat_time_var     = "adopt_year",
degrees            = 0:3,
horizons           = 1:5,
lags               = 1,                 # test treatment shifted 0..3 years earlier
se_method          = "analytic",
covariate_vars     = c("covariate1", "covariate2"),
beta_estimator     = "ols",               # or "iv", "unitwise", "none"
min_iv_lag         = 2,
max_iv_lag         = 2,
control_group_value= FALSE,                # set e.g. FALSE to switch to DFAT mode
forecast_lag       = 0,
pretreatment_window= "full"
)
placebo_dfat_out <- estimate_placebo_fat(
data               = sim_data_with_controls,
unit_var           = "state",
time_var           = "Year",
outcome_var        = "ln_age_mort_rate",
treat_time_var     = "adopt_year",
degrees            = 0:3,
horizons           = 1:5,
lags               = 2,                 # test treatment shifted 0..3 years earlier
se_method          = "analytic",
covariate_vars     = c("covariate1", "covariate2"),
beta_estimator     = "ols",               # or "iv", "unitwise", "none"
min_iv_lag         = 2,
max_iv_lag         = 2,
control_group_value= FALSE,                # set e.g. FALSE to switch to DFAT mode
forecast_lag       = 0,
pretreatment_window= "full"
)
plot_fat_dfat_avg_trajectory <- function(predictions_df, mode = c("fat", "dfat"),
unit_var = "state", time_var = "Year",
outcome_var = "ln_age_mort_rate", pred_var = "preds") {
mode <- match.arg(mode)
library(dplyr)
library(ggplot2)
# Label treatment group
if (mode == "dfat") {
if (!"treated" %in% names(predictions_df)) stop("DFAT mode requires a 'treated' column.")
predictions_df <- predictions_df %>%
mutate(group = ifelse(treated == 1, "Treated", "Control"))
} else {
predictions_df$group <- "Treated"
}
# Aggregate: mean over units, by Year × group × deg
agg_df <- predictions_df %>%
group_by(Year, group, deg) %>%
summarise(
obs = mean(.data[[outcome_var]], na.rm = TRUE),
pred = mean(.data[[pred_var]], na.rm = TRUE),
.groups = "drop"
) %>%
tidyr::pivot_longer(cols = c("obs", "pred"),
names_to = "type",
values_to = "value")
# Plot: Average observed and predicted for each group
ggplot(agg_df, aes(x = Year, y = value, color = type, linetype = type)) +
geom_line(size = 1.1) +
facet_wrap(~ group + deg, ncol = 2, labeller = label_both) +
scale_color_manual(values = c("obs" = "black", "pred" = "blue"),
labels = c("Observed", "Forecasted")) +
scale_linetype_manual(values = c("obs" = "solid", "pred" = "dashed")) +
scale_x_continuous(breaks = scales::pretty_breaks(), labels = scales::number_format(accuracy = 1)) +
theme_minimal(base_size = 13) +
theme(legend.position = "bottom") +
labs(
title = paste0("Average Outcome Trajectories (", toupper(mode), " Mode)"),
subtitle = "Solid = Observed, Dashed = Forecasted | Facets: Group × Degree",
x = "Year",
y = outcome_var,
color = "Line Type",
linetype = "Line Type"
)
}
devtools::document()
plot_fat_ci(fat_out$results, title = "FAT with 95% CI")
plot_fat_ci(res_full$results, title = "FAT with 95% CI")
plot_fat_ci(placebo_all$results, title = "FAT with 95% CI")
plot_fat_ci(placebo_out$results, title = "FAT with 95% CI")
plot_fat_ci(placebo_out$results, llag = 2, title = "FAT with 95% CI")
plot_fat_ci(res_full$results, title = "FAT with 95% CI")
plot_fat_ci(res_min$results, title = "FAT with 95% CI")
devtools::document()
plot_fat_dfat_trajectories(predictions_df = res_min$predictions, mode = "fat")
plot_fat_dfat_trajectories(predictions_df = res_min$predictions)
plot_fat_dfat_trajectories(predictions_df = res_dfat$predictions, mode = "dfat")
devtools::document()
devtools::document()
plot_fat_ci(res_min$results, title = "FAT with 95% CI")
plot_fat_ci(res_full$results, title = "FAT with 95% CI")
plot_fat_ci(placebo_out$results, llag = 2, title = "FAT with 95% CI")
plot_fat_ci(placebo_out$results, title = "FAT with 95% CI")
placebo_dfat_out <- estimate_placebo_fat(
data               = sim_data_with_controls,
unit_var           = "state",
time_var           = "Year",
outcome_var        = "ln_age_mort_rate",
treat_time_var     = "adopt_year",
degrees            = 0:3,
horizons           = 1:5,
lags               = 2,                 # test treatment shifted 0..3 years earlier
se_method          = "analytic",
covariate_vars     = c("covariate1", "covariate2"),
beta_estimator     = "ols",               # or "iv", "unitwise", "none"
min_iv_lag         = 2,
max_iv_lag         = 2,
control_group_value= FALSE,                # set e.g. FALSE to switch to DFAT mode
forecast_lag       = 0,
pretreatment_window= "full"
)
View(placebo_dfat_out)
plot_fat_ci(placebo_dfat_out$results, title = "FAT with 95% CI")
placebo_dfat_out <- estimate_placebo_fat(
data               = sim_data_with_controls,
unit_var           = "state",
time_var           = "Year",
outcome_var        = "ln_age_mort_rate",
treat_time_var     = "adopt_year",
degrees            = 0:3,
horizons           = 1:5,
lags               = 2,                 # test treatment shifted 0..3 years earlier
se_method          = "analytic",
covariate_vars     = c("covariate1", "covariate2"),
beta_estimator     = "ols",               # or "iv", "unitwise", "none"
min_iv_lag         = 2,
max_iv_lag         = 2,
control_group_value= FALSE,                # set e.g. FALSE to switch to DFAT mode
forecast_lag       = 0,
pretreatment_window= "full"
)
plot_fat_ci(placebo_dfat_out$results, title = "FAT with 95% CI")
devtools::document()
placebo_dfat_out <- estimate_placebo_fat(
data               = sim_data_with_controls,
unit_var           = "state",
time_var           = "Year",
outcome_var        = "ln_age_mort_rate",
treat_time_var     = "adopt_year",
degrees            = 0:3,
horizons           = 1:5,
lags               = 2,                 # test treatment shifted 0..3 years earlier
se_method          = "analytic",
covariate_vars     = c("covariate1", "covariate2"),
beta_estimator     = "ols",               # or "iv", "unitwise", "none"
min_iv_lag         = 2,
max_iv_lag         = 2,
control_group_value= FALSE,                # set e.g. FALSE to switch to DFAT mode
forecast_lag       = 0,
pretreatment_window= "full"
)
placebo_dfat_out <- estimate_placebo_fat(
data               = sim_data_with_controls,
unit_var           = "state",
time_var           = "Year",
outcome_var        = "ln_age_mort_rate",
treat_time_var     = "adopt_year",
degrees            = 0:3,
horizons           = 1:5,
lags               = 2,                 # test treatment shifted 0..3 years earlier
se_method          = "analytic",
covariate_vars     = c("covariate1", "covariate2"),
beta_estimator     = "ols",               # or "iv", "unitwise", "none"
min_iv_lag         = 2,
max_iv_lag         = 2,
control_group_value= FALSE,                # set e.g. FALSE to switch to DFAT mode
forecast_lag       = 0,
pretreatment_window= "full"
)
# Include all dependencies. Select "NO" when asked to install from source
install.packages(c("devtools","tidyverse","usethis","testthat","knitr","roxygen2"))
library(pacman)
pacman::p_load(devtools,tidyverse,usethis,testthat,knitr,roxygen2)
install.packages(c("devtools", "tidyverse", "usethis", "testthat", "knitr", "roxygen2"))
devtools::document()
set.seed(42)
# Parameters
n_units <- 40
n_years <- 10
units <- paste0("state", 1:n_units)
years <- 2000 + 0:(n_years - 1)
# Simulate unit-level data
sim_data_with_controls <- expand.grid(state = units, Year = years)
sim_data_with_controls <- sim_data_with_controls[order(sim_data_with_controls$state,
sim_data_with_controls$Year), ]
# Half treated, half control
treated_units <- sample(units, n_units / 2)
sim_data_with_controls$treated <- sim_data_with_controls$state %in% treated_units
# Assign adoption year only to treated units
sim_data_with_controls$adopt_year <- ifelse(sim_data_with_controls$treated,
sample(2003:2006, length(treated_units), replace = TRUE)[
match(sim_data_with_controls$state[sim_data_with_controls$treated], treated_units)
],
NA)
# Time to treatment
sim_data_with_controls$time_to_treat <- sim_data_with_controls$Year - sim_data_with_controls$adopt_year
# Simulate covariates and outcome
sim_data_with_controls$covariate1 <- rnorm(nrow(sim_data_with_controls))
sim_data_with_controls$covariate2 <- rnorm(nrow(sim_data_with_controls))
# Simulate true untreated outcome
sim_data_with_controls$y0 <- with(sim_data_with_controls,
0.5 * covariate1 - 0.3 * covariate2 + 0.05 * (Year - 2000) +
rnorm(nrow(sim_data_with_controls), sd = 0.2)
)
# Add treatment effect after adoption for treated units
sim_data_with_controls$ln_age_mort_rate <- sim_data_with_controls$y0 +
ifelse(sim_data_with_controls$treated &
!is.na(sim_data_with_controls$adopt_year) &
sim_data_with_controls$Year > sim_data_with_controls$adopt_year,
0.25, 0)
# Inspect
head(sim_data_with_controls)
# dev/simulate_fat_testdata.R
# ------------------------------------------------------------
# This script generates simulated panel data for testing the
# estimate_fat() function under different specifications:
#   - Baseline (no covariates)
#   - Pooled OLS-adjusted
#   - IV-adjusted
#
# It is meant for development and internal testing purposes.
# ------------------------------------------------------------
set.seed(123)
# Parameters
n_units <- 20
n_years <- 10
min_year <- 2000
unit_names <- paste0("state", 1:n_units)
data_list <- lapply(unit_names, function(unit) {
treat_year <- sample(2004:2007, 1)  # Treatment years between 2004 and 2007
years <- min_year:(min_year + n_years - 1)
tibble::tibble(
state = unit,
Year = years,
adopt_year = treat_year,
timeToTreat = Year - treat_year,
covariate1 = rnorm(n_years, mean = 0, sd = 1),
covariate2 = rnorm(n_years, mean = 0, sd = 1),
instrument = lag(covariate1, 2),
ln_age_mort_rate = 3 + 0.05 * (years - min_year) - 0.2 * (years >= treat_year) +
0.3 * rnorm(n_years) + 0.5 * rnorm(1)  # base trend + noise + unit FE
)
})
# Combine into panel
sim_data <- dplyr::bind_rows(data_list)
# Clean up instrument column (remove NA due to lag)
sim_data <- dplyr::group_by(sim_data, state) %>%
dplyr::mutate(instrument = dplyr::lag(covariate1, 2)) %>%
dplyr::ungroup()
library(dplyr)
# dev/simulate_fat_testdata.R
# ------------------------------------------------------------
# This script generates simulated panel data for testing the
# estimate_fat() function under different specifications:
#   - Baseline (no covariates)
#   - Pooled OLS-adjusted
#   - IV-adjusted
#
# It is meant for development and internal testing purposes.
# ------------------------------------------------------------
set.seed(123)
# Parameters
n_units <- 20
n_years <- 10
min_year <- 2000
unit_names <- paste0("state", 1:n_units)
data_list <- lapply(unit_names, function(unit) {
treat_year <- sample(2004:2007, 1)  # Treatment years between 2004 and 2007
years <- min_year:(min_year + n_years - 1)
tibble::tibble(
state = unit,
Year = years,
adopt_year = treat_year,
timeToTreat = Year - treat_year,
covariate1 = rnorm(n_years, mean = 0, sd = 1),
covariate2 = rnorm(n_years, mean = 0, sd = 1),
instrument = lag(covariate1, 2),
ln_age_mort_rate = 3 + 0.05 * (years - min_year) - 0.2 * (years >= treat_year) +
0.3 * rnorm(n_years) + 0.5 * rnorm(1)  # base trend + noise + unit FE
)
})
# Combine into panel
sim_data <- dplyr::bind_rows(data_list)
# Clean up instrument column (remove NA due to lag)
sim_data <- dplyr::group_by(sim_data, state) %>%
dplyr::mutate(instrument = dplyr::lag(covariate1, 2)) %>%
dplyr::ungroup()
# Save to global environment for immediate testing
assign("sim_data", sim_data, envir = .GlobalEnv)
# Optional: write to file for persistent testing or examples
# readr::write_csv(sim_data, "dev/simulated_fat_data.csv")
## Run once with full:
res_full <- estimate_fat(
data = sim_data, unit_var = "state", time_var = "Year",
outcome_var = "ln_age_mort_rate", treat_time_var = "adopt_year",
degrees = 0:2, horizons = 1:3,
beta_estimator = "none",
forecast_lag = 0,
pretreatment_window = "full"
)
## And once with minimal:
res_min  <- estimate_fat(
data = sim_data, unit_var = "state", time_var = "Year",
outcome_var = "ln_age_mort_rate", treat_time_var = "adopt_year",
degrees = 0:2, horizons = 1:3,
beta_estimator = "none",
forecast_lag = 0,
pretreatment_window = "minimal"
)
check_full <- res_full$predictions |>
dplyr::group_by(state, deg) |>
dplyr::summarise(n_pre_fit = dplyr::first(n_pre_fit),
years_used = dplyr::first(pre_years_used),
.groups = "drop")
check_min <- res_min$predictions |>
dplyr::group_by(state, deg) |>
dplyr::summarise(n_pre_fit = dplyr::first(n_pre_fit),
years_used = dplyr::first(pre_years_used),
.groups = "drop")
degrees            = 0:3,
check_min <- res_min$predictions |>
dplyr::group_by(state, deg) |>
dplyr::summarise(n_pre_fit = dplyr::first(n_pre_fit),
years_used = dplyr::first(pre_years_used),
.groups = "drop")
check_full <- res_full$predictions |>
dplyr::group_by(state, deg) |>
dplyr::summarise(n_pre_fit = dplyr::first(n_pre_fit),
years_used = dplyr::first(pre_years_used),
.groups = "drop")
View(check_min)
View(check_full)
plot_fat_ci(fat_out$results, title = "FAT with 95% CI")
plot_fat_ci(res_full$results, title = "FAT with 95% CI")
plot_fat_ci(res_min$results, title = "FAT with 95% CI")
# ----------------------------------------------- #
placebo_out <- estimate_placebo_fat(
data = panel_df,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 0:2,
horizons = 1:3,
lags = 2,  # specify the lag you want to test
forecast_lag = 0,
pretreatment_window = "minimal"
)
# ----------------------------------------------- #
placebo_out <- estimate_placebo_fat(
data = sim_data,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 0:2,
horizons = 1:3,
lags = 2,  # specify the lag you want to test
forecast_lag = 0,
pretreatment_window = "minimal"
)
warnings()
# ----------------------------------------------- #
placebo_out <- estimate_placebo_fat(
data = sim_data,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 0:2,
horizons = 1:3,
lags = 1,  # specify the lag you want to test
forecast_lag = 0,
pretreatment_window = "minimal"
)
plot_fat_ci(placebo_out$results, title = "FAT with 95% CI")
library(dplyr); library(tidyr)
I  <- 30; Tt <- 15
units <- paste0("u", seq_len(I))
years <- 2001 + seq_len(Tt)
panel_df <- tidyr::expand_grid(state = units, Year = years) |>
group_by(state) |>
mutate(
a_i       = rnorm(1, 0, 0.3),
b_i       = rnorm(1, 0.02, 0.01),
adopt_year= sample(c(2006:2010, NA), 1),   # staggered adoption; some never treated
treated   = !is.na(adopt_year),
y0        = a_i + b_i*(Year - 2000) + rnorm(n(), 0, 0.15),
tau       = ifelse(treated & Year >= adopt_year, 0.25 + 0.05*(Year - adopt_year), 0),
ln_age_mort_rate = y0 + tau
) |>
ungroup() |>
select(state, Year, ln_age_mort_rate, adopt_year, treated)
head(panel_df)
```
fat_out$results
```
```
fat_out <- estimate_fat(
data                = panel_df,
unit_var            = "state",
time_var            = "Year",
outcome_var         = "ln_age_mort_rate",
treat_time_var      = "adopt_year",
degrees             = 0:2,
horizons            = 1:3,
se_method           = "analytic",
beta_estimator      = "none",
forecast_lag        = 0,          # forecast starts in adoption year
pretreatment_window = "full"      # use all pre-treatment years available
)
```
fat_out <- estimate_fat(
data                = sim_data,
unit_var            = "state",
time_var            = "Year",
outcome_var         = "ln_age_mort_rate",
treat_time_var      = "adopt_year",
degrees             = 0:2,
horizons            = 1:3,
se_method           = "analytic",
beta_estimator      = "none",
forecast_lag        = 0,          # forecast starts in adoption year
pretreatment_window = "full"      # use all pre-treatment years available
)
fat_out$results
p_fat <- plot_fat_ci(fat_out$results, title = "FAT with 95% CI")
p_fat
head(sim_data)
```
knitr::opts_chunk$set(
collapse = TRUE,
comment = "#>",
fig.width = 7,
fig.height = 4.5
)
set.seed(123)
library(fatEstimator)
devtools::load_all()
library(fatEstimation)
fat_out$results
devtools::document()
library(fatEstimator)
devtools::document()
devtools::document()
kj]
devtools::install()
rmarkdown::render("vignettes/fat_vignette.Rmd", clean=TRUE)
library(fatEstimator)
library("fatEstimator")
library(knitr)
library(rmarkdown)
devtools::document()
rmarkdown::render("vignettes/fat_vignette.Rmd", clean=TRUE)
devtools::install()
browseVignettes("fatEstimator")
