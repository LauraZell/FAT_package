degrees = 0:1,
horizons = 1:2
)
testthat::test_file("tests/testthat/test-estimate_fat.R")
library(testthat)
library(dplyr)       # ‚Üê Add this
library(fatEstimation)
test_that("estimate_fat() runs and returns expected structure", {
# Create test dataset
test_data <- data.frame(
state = rep(c("A", "B"), each = 10),
Year = rep(2001:2010, times = 2),
ln_age_mort_rate = rnorm(20, mean = 2, sd = 0.5),
Medical_Cannabis_Law = c(rep(0, 4), rep(1, 6), rep(0, 6), rep(1, 4))
) %>%
group_by(state) %>%
mutate(adopt = ifelse(Medical_Cannabis_Law > 0 & lag(Medical_Cannabis_Law) == 0, 1, 0),
adopt_year = min(Year[adopt == 1], na.rm = TRUE)) %>%
ungroup()
# Estimate FAT with bootstrapping (small n for test)
fat_result <- estimate_fat(
data = test_data,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 0:1,
horizons = 1:2,
bootstrap = TRUE,
n_bootstrap = 5
)
# Structure tests
expect_s3_class(fat_result, "data.frame")
expect_true(all(c("deg", "hh", "FAT", "sdFAT") %in% names(fat_result)))
# Value tests
expect_true(nrow(fat_result) > 0)
expect_false(any(is.na(fat_result$FAT)))
})
test_data <- data.frame(
state = rep(c("A", "B"), each = 10),
Year = rep(2001:2010, times = 2),
ln_age_mort_rate = rnorm(20, mean = 2, sd = 0.5),
Medical_Cannabis_Law = c(rep(0, 4), rep(1, 6), rep(0, 6), rep(1, 4))
) %>%
group_by(state) %>%
mutate(adopt = ifelse(Medical_Cannabis_Law > 0 & lag(Medical_Cannabis_Law) == 0, 1, 0),
adopt_year = min(Year[adopt == 1], na.rm = TRUE)) %>%
ungroup()
# Estimate FAT with bootstrapping (small n for test)
fat_result <- estimate_fat(
data = test_data,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 0:1,
horizons = 1:2,
bootstrap = TRUE,
n_bootstrap = 5
)
# Structure tests
expect_s3_class(fat_result, "data.frame")
expect_true(all(c("deg", "hh", "FAT", "sdFAT") %in% names(fat_result)))
# Value tests
expect_true(nrow(fat_result) > 0)
expect_false(any(is.na(fat_result$FAT)))
print(fat_result)  # View in Console
View(fat_result)   # View in a spreadsheet-like Viewer tab
devtools::test()
testthat::test_file("tests/testthat/test-estimate_fat-se_methods.R")
usethis::use_package("sandwich")
devtools::test()
usethis::use_package("lmtest")
devtools::test()
devtools::test()
devtools::test()
devtools::document()
devtools::test()
usethis::use_import_from("dplyr", c("filter", "mutate", "group_by", "ungroup", "summarise", "lag"))
usethis::use_package_doc()
usethis::use_import_from("dplyr", c("filter", "mutate", "group_by", "ungroup", "summarise", "lag"))
usethis::use_import_from("purrr", c("map_df", "map", "pmap_dfr"))
usethis::use_import_from("stats", c("as.formula", "lm", "predict", "sd", "quantile"))
usethis::use_import_from("tibble", "tibble")
usethis::use_import_from("sandwich", "vcovCL")
usethis::use_import_from("lmtest", "coeftest")
devtools::document()
usethis::use_zzz()
usethis::use_zzz()
usethis::use_zzz()
devtools::document()
devtools::check()
desc::desc_get("License")
usethis::use_mit_license("Laura Zell")
devtools::document()
devtools::check()
devtools::document()
devtools::check()
devtools::document()
devtools::check()
usethis::use_build_ignore(c("fatEstimation.Rproj", "packagesetup.R"))
devtools::check()
library(fatEstimation)
# Example dataset (included in the package)
data(toy_fat_data)
# Estimate FAT
fat_result <- estimate_fat(
data = toy_fat_data,
unit_var = "state",
time_var = "year",
outcome_var = "ln_outcome",
treat_time_var = "adopt_year"
)
library(fatEstimation)
# Example dataset (included in the package)
data(toy_fat_data)
# Estimate FAT
fat_result <- estimate_fat(
data = test_data,
unit_var = "state",
time_var = "year",
outcome_var = "ln_outcome",
treat_time_var = "adopt_year"
)
library(fatEstimation)
# Example dataset (included in the package)
data(toy_fat_data)
# Estimate FAT
fat_result <- estimate_fat(
data = test_data,
unit_var = "state",
time_var = "year",
outcome_var = "ln_outcome",
treat_time_var = "adopt_year"
)
library(fatEstimation)
# Example dataset (included in the package)
data(toy_fat_data)
# Estimate FAT
fat_result <- estimate_fat(
data = test_data,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_outcome",
treat_time_var = "adopt_year"
)
vignette("introduction", package = "fatEstimation")
## üöÄ Basic Usage
Here is a simplified example using synthetic municipal-level panel data:
library(fatEstimation)
library(dplyr)
# Simulate example municipal data
set.seed(42)
example_data <- data.frame(
municipality = rep(paste0("M", 1:10), each = 10),
year = rep(2001:2010, times = 10),
net_debt_pc = rnorm(100, mean = 5000, sd = 1000),
merged = rep(c(rep(0, 5), rep(1, 5)), each = 10)
) %>%
group_by(municipality) %>%
mutate(
adopt = ifelse(merged > 0 & lag(merged) == 0, 1, 0),
adopt_year = min(year[adopt == 1], na.rm = TRUE)
) %>%
ungroup()
# Estimate FAT
fat_result <- estimate_fat(
data = example_data,
unit_var = "municipality",
time_var = "year",
outcome_var = "net_debt_pc",
treat_time_var = "adopt_year",
degrees = 0:1,
horizons = 1:3
)
# Plot the results
plot_fat_diagnostics(fat_result)
library(fatEstimation)
library(dplyr)
# Load example data (Shover-style application)
data("cannabis_overdose")  # <-- This would be your example dataset in /data/
# Prepare data
df <- cannabis_overdose %>%
mutate(timeToTreat = Year - adopt_year)
source("data-raw/cannabis_overdose.R")
source("data-raw/cannabis_overdose.R")
wd
cd
source("data-raw/cannabis_overdose.R")
getwd()
source("data-raw/cannabis_overdose.R")
source("/Users/laurazell/Dropbox/04_Doktorat/research_stay/UCL/R_package/fat/fatpackage/data-raw/cannabis_overdose.R")
source("data-raw/cannabis_overdose.R")
source("data-raw/cannabis_overdose_raw_script.R")
library(fatEstimation)
data(cannabis_overdose)
# Run FAT estimation for deg = 0:2, hh = 1:3
results <- estimate_fat(
data = cannabis_overdose,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
units_to_include = unique(cannabis_overdose$state),
degrees = 0:2,
horizons = 1:3,
se_method = "analytic"
)
print(results)
# Plot results
library(ggplot2)
ggplot(result, aes(x = hh, y = FAT, color = as.factor(deg))) +
geom_point() +
geom_errorbar(aes(ymin = FAT - 1.96 * sdFAT, ymax = FAT + 1.96 * sdFAT)) +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_minimal() +
labs(title = "Forecasted Average Treatment Effects",
x = "Horizon (Years after adoption)",
color = "Polynomial Degree")
# Plot results
library(ggplot2)
ggplot(results, aes(x = hh, y = FAT, color = as.factor(deg))) +
geom_point() +
geom_errorbar(aes(ymin = FAT - 1.96 * sdFAT, ymax = FAT + 1.96 * sdFAT)) +
geom_hline(yintercept = 0, linetype = "dashed") +
theme_minimal() +
labs(title = "Forecasted Average Treatment Effects",
x = "Horizon (Years after adoption)",
color = "Polynomial Degree")
devtools::document()
devtools::load_all()
devtools::build_vignettes()
library(testthat)
library(fatEstimation)
library(dplyr)
# Create test dataset
test_data <- data.frame(
state = rep(c("A", "B", "C"), each = 10),
Year = rep(2001:2010, times = 3),
ln_age_mort_rate = rnorm(30, mean = 2, sd = 0.5),
Medical_Cannabis_Law = c(rep(0, 4), rep(1, 6), rep(0, 5), rep(1, 5), rep(0, 6), rep(1, 4))
) %>%
group_by(state) %>%
mutate(adopt = ifelse(Medical_Cannabis_Law > 0 & lag(Medical_Cannabis_Law) == 0, 1, 0),
adopt_year = min(Year[adopt == 1], na.rm = TRUE)) %>%
ungroup()
test_that("estimate_fat() returns valid results with analytic SE", {
result <- estimate_fat(
data = test_data,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 0:1,
horizons = 1:2,
se_method = "analytic"
)
expect_s3_class(result, "data.frame")
expect_true(all(c("deg", "hh", "FAT", "sdFAT") %in% names(result)))
expect_false(any(is.na(result$FAT)))
expect_false(any(is.na(result$sdFAT)))
})
test_that("estimate_fat() returns valid results with bootstrap SE", {
result <- estimate_fat(
data = test_data,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 0:1,
horizons = 1:2,
se_method = "bootstrap",
n_bootstrap = 5
)
expect_s3_class(result, "data.frame")
expect_true(all(c("deg", "hh", "FAT", "sdFAT") %in% names(result)))
expect_false(any(is.na(result$FAT)))
expect_false(any(is.na(result$sdFAT)))
})
test_that("estimate_fat() returns valid results with clustered SE", {
result <- estimate_fat(
data = test_data,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
degrees = 0:1,
horizons = 1:2,
se_method = "clustered"
)
expect_s3_class(result, "data.frame")
expect_true(all(c("deg", "hh", "FAT", "sdFAT") %in% names(result)))
expect_false(any(is.na(result$FAT)))
expect_false(any(is.na(result$sdFAT)))
})
# Example: assuming `your_data` is already preprocessed
results_all_se <- purrr::map_dfr(
c("analytic", "bootstrap", "clustered"),
~ estimate_fat(data = data,
unit_var = "state",
time_var = "year",
outcome_var = "overdose_mortality",
treat_time_var = "treat_year",
se_method = .x,
degrees = 0:2,
horizons = 1:5,
n_bootstrap = 200) %>%
dplyr::mutate(se_method = .x)
)
.rs.restartR()  # if you're in RStudio
source("R/estimate_fat.R")
devtools::load_all()
rm(list = c("estimate_fat"))
devtools::load_all()
is.function(estimate_fat)  # should return TRUE
results_all_se <- purrr::map_dfr(
c("analytic", "bootstrap", "clustered"),
function(sem) {
estimate_fat(data = data,
unit_var = "state",
time_var = "year",
outcome_var = "overdose_mortality",
treat_time_var = "treat_year",
se_method = sem,
degrees = 0:2,
horizons = 1:5,
n_bootstrap = 200) |>
dplyr::mutate(se_method = sem)
}
)
# Example: assuming `your_data` is already preprocessed
results_all_se <- purrr::map_dfr(
c("analytic", "bootstrap", "clustered"),
~ estimate_fat(data = data,
unit_var = "state",
time_var = "year",
outcome_var = "overdose_mortality",
treat_time_var = "treat_year",
se_method = .x,
degrees = 0:2,
horizons = 1:5,
n_bootstrap = 200) %>%
dplyr::mutate(se_method = .x)
)
# Example: assuming `your_data` is already preprocessed
results_all_se <- purrr::map_dfr(
c("analytic", "bootstrap", "clustered"),
~ estimate_fat(data = data,
unit_var = "state",
time_var = "Year",
outcome_var = "overdose_mortality",
treat_time_var = "treat_year",
se_method = .x,
degrees = 0:2,
horizons = 1:5,
n_bootstrap = 200) %>%
dplyr::mutate(se_method = .x)
)
# Example: assuming `your_data` is already preprocessed
results_all_se <- purrr::map_dfr(
c("analytic", "bootstrap", "clustered"),
function(method) {
estimate_fat(
data = data,
unit_var = "state",
time_var = "Year",
outcome_var = "overdose_mortality",
treat_time_var = "treat_year",
se_method = method,
degrees = 0:2,
horizons = 1:5,
n_bootstrap = 200
) %>%
dplyr::mutate(se_method = method)
}
)
# Example: assuming `your_data` is already preprocessed
results_all_se <- purrr::map_dfr(
c("analytic", "bootstrap", "clustered"),
function(method) {
estimate_fat(
data = test_data,
unit_var = "state",
time_var = "Year",
outcome_var = "overdose_mortality",
treat_time_var = "treat_year",
se_method = method,
degrees = 0:2,
horizons = 1:5,
n_bootstrap = 200
) %>%
dplyr::mutate(se_method = method)
}
)
print(class(data))
rm(data)
# Example: assuming `your_data` is already preprocessed
results_all_se <- purrr::map_dfr(
c("analytic", "bootstrap", "clustered"),
function(method) {
estimate_fat(
data = cannabis_overdose,
unit_var = "state",
time_var = "Year",
outcome_var = "overdose_mortality",
treat_time_var = "treat_year",
se_method = method,
degrees = 0:2,
horizons = 1:5,
n_bootstrap = 200
) %>%
dplyr::mutate(se_method = method)
}
)
results_all_se <- purrr::map_dfr(
c("analytic", "bootstrap", "clustered"),
function(method) {
estimate_fat(
data = cannabis_overdose,
unit_var = "state",
time_var = "Year",
outcome_var = "overdose_mortality",
treat_time_var = "adopt_year",
se_method = method,
degrees = 0:2,
horizons = 1:5,
n_bootstrap = 200
) %>%
dplyr::mutate(se_method = method)
}
)
results_all_se <- purrr::map_dfr(
c("analytic", "bootstrap", "clustered"),
function(method) {
estimate_fat(
data = cannabis_overdose,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
se_method = method,
degrees = 0:2,
horizons = 1:5,
n_bootstrap = 200
) %>%
dplyr::mutate(se_method = method)
}
)
ggplot(results_all_se, aes(x = hh, y = FAT, color = se_method)) +
geom_line(aes(group = interaction(deg, se_method)), linetype = "solid") +
geom_point() +
geom_errorbar(aes(ymin = FAT - 1.96 * sdFAT, ymax = FAT + 1.96 * sdFAT),
width = 0.2) +
facet_wrap(~ deg, labeller = label_both) +
theme_minimal() +
labs(title = "Forecasted Average Treatment Effects by SE Method",
x = "Horizon (h)", y = "FAT Estimate", color = "SE Method")
library(ggplot2)
ggplot(results_all_se, aes(x = hh, y = FAT, color = se_method)) +
geom_line(aes(group = interaction(deg, se_method)), linetype = "solid") +
geom_point() +
geom_errorbar(aes(ymin = FAT - 1.96 * sdFAT, ymax = FAT + 1.96 * sdFAT),
width = 0.2) +
facet_wrap(~ deg, labeller = label_both) +
theme_minimal() +
labs(title = "Forecasted Average Treatment Effects by SE Method",
x = "Horizon (h)", y = "FAT Estimate", color = "SE Method")
data <- cannabis_overdose
# dev/fat_diagnostics.R
results_all_se <- purrr::map_dfr(
c("analytic", "bootstrap", "clustered"),
function(method) {
estimate_fat(
data = data,
unit_var = "state",
time_var = "Year",
outcome_var = "overdose_mortality",
treat_time_var = "treat_year",
se_method = method,
degrees = 0:2,
horizons = 1:5,
n_bootstrap = 200
) %>%
dplyr::mutate(se_method = method)
}
)
data <- cannabis_overdose
# dev/fat_diagnostics.R
results_all_se <- purrr::map_dfr(
c("analytic", "bootstrap", "clustered"),
function(method) {
estimate_fat(
data = data,
unit_var = "state",
time_var = "Year",
outcome_var = "ln_age_mort_rate",
treat_time_var = "adopt_year",
se_method = method,
degrees = 0:2,
horizons = 1:5,
n_bootstrap = 200
) %>%
dplyr::mutate(se_method = method)
}
)
ggplot(results_all_se, aes(x = hh, y = FAT, color = se_method)) +
geom_line() +
facet_wrap(~ deg) +
geom_errorbar(aes(ymin = FAT - sdFAT, ymax = FAT + sdFAT), width = 0.2) +
theme_minimal()
View(cannabis_overdose)
head(cannabis_overdose)
